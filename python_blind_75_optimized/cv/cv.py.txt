# A CV as code, created by human idea assisted by AI, thank you for reading.
# To run, pip install numpy==1.24.2 pydantic==2.0.1 matplotlib==3.7.1
# python cv.py
""" 
Name: Fei Chen
Phone: 44-(0)-757-661-1811 (London, U.K.)
github: https://github.com/feimvnc
linkedin: https://www.linkedin.com/in/fei-chen-1654849/

Ability:
        Inventor
        Learner
        Reliable Engineer
        Volunteer

Certifications:
        Amazon Certified: 7
        Google Certified: 7
        Kubernetes Certified: 3
        Cissp Certified: 1
        Terraform: 1
        Others: Oracle, Security+, Java

Patents:
        62/989,157, Software Automation, 2020
        62/984,826, Deployment Automation, 2020
        62/984,846, Change Detection Auto Agent, 2020
        202011016151, Config Engineering, 2020
        Other Patents, 8 Internal Approved

Experence:
        Pepsico, 2.0
        Cisco, 3.0
        Enginex, 1.0
        Jpmorgan, 16.0
        Gsm_Terces, 2, 4

Projects:
        Flagship Reporting System: Cognos, 60 Tomcats, Java
        Cisco Optical Network Management System: Java, Snmp
        Enerprise Etl Data Processing: Informatica, Java
        Private Blockchain Quorum: Solidity, Ethereum
        Aws, Eks And Docker: Python, Java, Docker
        Enterprise Collateral Management: Hybrid Cloud, Python, Java
        Data Center Migration: Python, Shell
        Hybrid Cloud Operation And Autumaton: Python, Shell
        Cyber Cv Mitigation, Pen Testing: Python, Go, Shell
        Sdlc Dev Infrastrucure Automation: Python, Shell
        Cloud Migration Copilot With Gpt: Python, Gpt, Cloud

Researches:
        Ai/Ml: 3
        K8S-Security: 1
        Aws-Google Cloud: 2
        Ml Model-Safety: 2
        Ml Model-Rating: 1
        Cloud Zero Trust: 1
        Engineering: 1
        Data/Access Security: 3

Awards:
        Hackathon_Gpt_Cloud, 2023_2, Python, Gpt, Guidance, Cloud
        Aws_Deepracer, 2020_20, Aws Sagemaker
        Round_Island, 2022_1, Sail Racing
        Innovator, 2019_1, Inventor Award
        Security_Competition, 2019_1, Cyber Competition
        Force_For_Good, 2018_1, Volunteer Project
        Employee_Award, 2015, Empoloyee Award

Volunteer_others:
        Aws Trainer
        Machine Learning Group Lead
        Blockchain Group Lead
        Force For Good
        Hackathon
        Patent Innovation

Eduation:
        U. N. Texas: Masters, Computer Science, Management
"""

from enum import Enum
from typing import Dict, Any, List, Optional
from collections import Counter
import math, re, yaml
from pydantic import BaseModel, ValidationError, constr
import numpy as np

def print_section_name(func):                        # decorator print func name as title
    fname = func.__name__
    def inner_func(*args, **kwargs):
        print(f"\n{fname.capitalize()}:")
        return func(*args, **kwargs)
    return inner_func    

class CV(BaseModel):                                  # CV class start here

    class Config:
        arbitrary_types_allowed = True                # Allow partialmethod

    name: str = "Fei Chen" 
    email: str = "" 
    phone: str = constr(strip_whitespace=True, min_length=12)
    github_linkedin: Optional[Dict[str, str]]
    profile: Dict[str, str] = None                    # Profile format

    @print_section_name
    def ability(self) -> List[str]:                   # CV section title
        a = np.array([
                      "Reliable engineer",             # Abilities 
                      "Inventor", 
                      "Learner", 
                      "Volunteer"])
        return np.unique(a)                           # Uniqueness 

    @print_section_name
    def certifications(self) -> Dict[str, str]:
        a = { 
            # "Certifications": "",
            "amazon certified": sum(np.ones(7, dtype="int32")),   # 7 (arch,sysop,dev,db,sec,ml,devop_pro)
            "google certified": sum([1]*7),                       # 7 (arch,sysadm,db,sec,ml,data,wks)
            "kubernetes certified": sum(np.array([1,1,1])),       # 3 (ckad,cka,cks)
            "cissp certified": min((1,2,3)),                      # 3 years memberships
            "terraform": round((complex(0 - pow(math.pi, (1j*math.e))).real)),    # 1.0, 0 - e^(i*pi) = 1
            "others": ("oracle, security+, java")                 # extras
            }            
        yield a 

    @print_section_name
    def patents(self) -> List[str]:
        x = { "62/989,157": "software automation, 2020",    # 4 published on uspto.com
              "62/984,826": "deployment automation, 2020",
              "62/984,846": "change detection auto agent, 2020",
              "202011016151": "config engineering, 2020",
              "Other patents": "8 internal approved", }   
        return [(a,i) for a,i in x.items()]

    @print_section_name
    def researches(self) -> List[Any]:
        a = {"ai/ml": True+True+True,                 # 3, 2022 ny ai summit, 2023 gpt-cloud, go-ml
             "k8s-security": f'{(math.cos(0)):1.0f}', # 1, 2022 devup conference
             "aws-google cloud": 1+1,                 # 2, cloud federation, hash chunk
             "ml model-safety": 2**1,                 # 2, model pen prompting, incident response
             "ml model-rating": 1,                    # 1, training data based model rating, from "The textbook is all you need" 
             "cloud zero trust": 1&1,                 # 1, cloud security model down to api  
             "engineering": 128>>7,                   # 1, automation, agent
             "data/access security": 3//1}            # 3, fraud by graph theory, dynamic session termination, api fingerprint
        return {**a}                                  # unpack items

    @print_section_name
    def experence(self) -> List[str]:
        x = np.full(20, fill_value=np.nan)            # 20 years 
        x[[0,3,5,-1]]=[42+2,42+3,42+1,16]             # fill with start year
        is_valid=~np.isnan(x)                         # select only start year
        x=np.array([np.where(x!=0,x%42, 0)])          # 0 given x value
        x=np.extract(is_valid, x)                     # [2, 3, 2, 16]years of exp.

        a0=["pepsico", "cisco", "enginex", "jpmorgan"]         # companies worked 
        i=len(max(a0, key=len))                                # max len of company name
        a=[x+'*'*(i-len(x)) if len(x)<i else x for x in a0]    # pad * for short names
        (a := [list(map(lambda i: ord(i), i)) for i in a])     # company string vectors
        a=np.array(x,dtype='int32')@np.array(a,dtype='int32')  # to str 
        ax=str(a.tolist()).replace(', ','')[1:-1]              # clean up str
        counter = Counter(ax)                                  # count number frequencies in ax
        cx = sorted(counter.most_common(4))[2::]               # get most common numbers
        return list(zip(a0, x)) + [("gsm_terces", [cx[0][0],cx[-1][0]][::])] # secret_msg, ['4', '2']

    @print_section_name
    def projects(self) -> List[Any]:
        a= {
            "flagship reporting system": ("cognos", "60 tomcats", "java"),
            "cisco optical network management system": ("java", "snmp"),
            "enerprise etl data processing": ("informatica", "java"),
            "private blockchain quorum": ("solidity", "ethereum"),
            "aws, eks and docker": ("python", "java", "docker"),
            "enterprise collateral management": ("hybrid cloud", "python", "java"),
            "data center migration": ("python", "shell"),
            "hybrid cloud operation and autumaton": ("python", "shell"),
            "cyber CV mitigation, pen testing": ("python", "go", "shell"),
            "sdlc dev infrastrucure automation": ("python", "shell"),
            "cloud migration copilot with gpt": ("python", "gpt", "cloud"),
            }
        return {**a} 

    @print_section_name
    def awards(self) -> List[str]:
        class R(Enum):
            HACKATHON_GPT_CLOUD = '2023_2, python, gpt, guidance, cloud'    # chat-gpt for cloud 
            AWS_DEEPRACER = '2020_20, aws sagemaker'                        # aws deepracer top 20
            ROUND_ISLAND = '2022_1, sail racing'                            # round the island sale top
            INNOVATOR = '2019_1, inventor award'                            # innovator award
            SECURITY_COMPETITION = '2019_1, cyber competition'              # security competition 2nd place
            FORCE_FOR_GOOD = '2018_1, volunteer project'                    # alzheimer research uk, top
            EMPLOYEE_AWARD = '2015, empoloyee award'                        # employee award
        return [(r.name.capitalize(), r.value.capitalize()) for r in R]     # return all values

    @print_section_name
    def eduation(self) -> Dict[Any, Any]:
        e = { "U. N. Texas": "Masters, Computer Science, Management"}       # Univ of N. texas, 2 x Masters
        yield e

    @print_section_name
    def volunteer_others(self) -> List[str]:
        v = ["AWS trainer",                           # all internal tech communities
             "Machine Learning group lead",           # tech community
             "Blockchain group lead",                 # tech community
             "Force for good",                        # charity volunteer
             "Hackathon",                             # tech community
             "Patent innovation"]                     # helped london tech hub to top 5
        return v

    def format_str(self, s: str=None, d: Dict[str, str]=None):    # print nicely
        s = ''.join(s := str(s).replace(d[0], d[1]) for d in d.items())
        s = re.sub('[\[\]\"\'\{\}\(\)]', '', s)
        print(" "*7, s.title())

    def timelines(self) -> None:
        dates=['2001', '2003', '2005', '2007', '2011', '2013', 
               '2015', '2017', '2019', '2021', '2022','2023']
        names=['pepsico dist. billing/accounting apps', 'cisco optical network mgmt. system', 
            'java certified(3x)', 'oracle certified(3x)', 'jpmorgan (dallas & london)', 
            'enterprise app dev/operation/security/deployment/cloud', 
            'process automation/engineering/operation/robotic agent patents(4)', 
            'cissp certified (isc2)', 'google cloud certified(7x)', 
            'kubernetes certified(3x cloud native)', 
            'amazon web service certified(7x)', 'openai/gpt/vectordb/guidane/cloud']
        levels = np.tile([-4,4,-2,2,-1,1], int(np.ceil(len(dates)/4)))[:len(dates)]

        import matplotlib.pyplot as plt
        import matplotlib.dates as mdates 
        from datetime import datetime
        dates = [datetime.strptime(d, "%Y") for d in dates]
        _, ax = plt.subplots(figsize=(12,4),layout="constrained")
        ax.set(title="cv graph")
        ax.vlines(dates, 0, levels, color="tab:red")
        ax.plot(dates, np.zeros_like(dates), "-o", 
            color="k", markerfacecolor="w")

        for d, l, r in zip(dates, levels, names):
            ax.annotate(r, xy=(d, l),
                    xytext=(10, np.sign(l)*3), textcoords="offset points",
                    horizontalalignment="center",
                    verticalalignment="bottom" if l > 0 else "top")
        ax.xaxis.set_major_locator(mdates.MonthLocator(interval=24))
        ax.xaxis.set_major_formatter(mdates.DateFormatter("%Y"))
        plt.setp(ax.get_xticklabels(), rotation=42)
        ax.yaxis.set_visible(False)
        ax.spines[["left", "top", "right"]].set_visible(False)
        ax.margins(y=0.42, x=0.042)
        plt.show()

def main():
    a = {
        "Name": "Fei Chen",
        "Phone": "44-(0)-757-661-1811 (London, U.K.)",
        "github": "https://github.com/feimvnc",
        "linkedin": "https://www.linkedin.com/in/fei-chen-1654849/" 
        }

    try:
        cv = CV(profile=a)
    except ValidationError as e:                      # print default if error
        print(yaml.dump(a))

    print(f'\n{yaml.dump(a)}')
    cv.format_str(str(cv.ability()), {"' '": "\n\t"})
    cv.format_str(str(list((cv.certifications()))), {", '": "\n\t"})
    cv.format_str(str(list((cv.patents()))), {"), (": "\n\t"})
    cv.format_str(str(list((cv.experence()))), {"), (": "\n\t"})
    cv.format_str(str(((cv.projects()))), {"'), '": "\n\t"})
    cv.format_str(str(((cv.researches()))), {", ": "\n\t"})
    cv.format_str(str(((cv.awards()))), {"), ('": "\n\t"})
    cv.format_str(str(((cv.volunteer_others()))), {"', '": "\n\t"})
    cv.format_str(str(list((cv.eduation()))), {"', '": "\n\t"})
    cv.timelines()

if __name__ == '__main__':
    main()  