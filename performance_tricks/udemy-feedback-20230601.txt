Likes:
-Really great contents on technical deep dives on python and ML
-Good technical depth and hands-on coding exercises and projects

Wants:
New contents is always preferred to be added following technology trends, for example:
More PyTorch related content would be helpful.
Reference: 
https://www.assemblyai.com/blog/pytorch-vs-tensorflow-in-2023/   ("Almost 92% of models are PyTorch exclusive, up from 85% last year")
https://openai.com/blog/openai-pytorch  ("OpenAI standardizes on PyTorch")
https://twitter.com/karpathy/status/868178954032513024?lang=en-GB
"I've been using PyTorch a few months now and I've never felt better. I have more energy. My skin is clearer. My eye sight has improved." 
Andrej Karpathy: was Tesla AI Director / OpenAI founder member
 
 
Updates preferred: 
Some contents which may have used deprecated or removed functions in newer releases (suggest adding a side note in lectures to keep students updated)


Udemy Website Header maintenance downtime message, showing on 16 May 2023.
"Udemy Business will be performing routine site maintenance on May. 31.Potential downtime to be expected from 6am to 10am PDT."
Comments:
Traditional downtime system maintenance activity can be improved using cloud services to achieve zero-downtime for better transition and rollback capabilities, please see below aws documentation and aws talk.
-Introduction - Blue/Green Deployments on AWS (https://docs.aws.amazon.com/whitepapers/latest/blue-green-deployments/introduction.html)
-Achieving zero-downtime
deployments (https://d1.awsstatic.com/events/reinvent/2019/REPEAT_1_Achieving_zero-downtime_deployments_with_Amazon_EKS_CON219-R1.pdf)
-Amazon ‘missed out on $34m in sales during internet outage (https://www.independent.co.uk/news/business/amazon-down-internet-outage-sales-b1861737.html)


I used below environments and versions when following udemy courses and coding exercises, and commented on what I observed, 
Local learning python and versions
Python (3.8.15, Release Date: Oct. 11, 2022, https://www.python.org/downloads/release/python-3815/)
Jupyter Notebook (6.5.2) (based on conda 23.1.0)
sns.__version__	(0.12.2)
url used: https://jpmc.udemy.com/course


Comments on courses:
Format:
Course name: The course name
Lecture number: The lecture number in the course
1:23: The specific playing time in the lecture, 1 minute and 23 seconds
Comments: observations and feedback
Reference url: reference source used for comments 


Course name: Complete Tensorflow 2 and Keras Deep Learning Bootcamp, Jose Portilla
Lecture 25.  Data Visualization Exercises - Solutions
2:47, sns.distplot(diamonds['price'])   
Comments: 
distplot() function mentioned "has been deprecated and will be removed in seaborn v0.14.0"
Reference url: https://seaborn.pydata.org/generated/seaborn.distplot.html


Lecture 43. Keras Regression Code Along - Exploratory Data Analysis
4:22, sns.distplot(df['price'])
Comments: 
distplot() function mentioned "has been deprecated and will be removed in seaborn v0.14.0"
Reference url: https://seaborn.pydata.org/generated/seaborn.distplot.html


##
Course name: Python 3: Deep Dive (Part 1 - Functional)
Dr. Fred Baptiste
38. Floats: Equality Testing - Lecture
17:36
a = 0.01
b = 0.02
math.isclose(x, y, rel_tol=i1-5, abs_tol=1e-5_ -> False
# (x, y) should be (a, b) to reflect corresponding variables at copy and paste

Similar corrected place can be found at:
39. Floats: Equality Testing - Coding
14:24

86. Function Introspection - Lecture
8:08 ("caption, now we've created a class def my class" with below code)
def MyClass:      # keyword "def" should be "class"
    def func(self):
    	pass 

class definition should start with "class" keyword, not "def" which causes "invalid syntax error".
Reference url: https://docs.python.org/3/tutorial/classes.html
9.3.1. Class Definition Syntax

The simplest form of class definition looks like this:

class ClassName:    # keyword "class" is used  
    <statement-1>
    .
    .
    .
    <statement-N>
    
    
121. Named Tuples - Lecture
25:38, line 5, 
Point2D._source  
Comments: 
The above "_source" method has been removed in python 3.7+
Reference url: https://docs.python.org/3/library/collections.html#collections.namedtuple
Changed in version 3.7: Removed the verbose parameter and the _source attribute.


122. Named Tuples - Coding
28:38, 6th line from botton
print(Stock._source)
Comments: 
Same as above, "_source" method is removed in python 3.7+


126. Named Tuples - DocStrings and Default Values - Coding
15:23, 6th line from bottom
Vector2D.__new__.__defaults__ = (0,0)
Comments: above code for namedtuple defaults works for older Python version < 3.7

For Python 3.7, a new "defaults" was introduced, 
Code: 
Vector2D = namedtuple('Vector2D', 'x1 y1 x2 y2 origin_x, origin_y', defaults=[0,0])     # defaults=(0,0) is used, above ".__new__.__default__" has error of missing arguments in Python 3.7+
v1 = Vector2D(10,10,20,20)
v1
Output: 
Vector2D(x1=10, y1=10, x2=20, y2=20, origin_x=0, origin_y=0)


128. Named Tuples - Application - Alternative to Dictionaries
21:39, line 6 from top
Same issue as above comments
Struct.__new__.defaults__ = (None, ) * len(Struct._fields)
...
5th line from bottom, when running it, below error occured
TypeError: __new__() missing 1 required positional argument: 'key3'


##
Course name: Python 3: Deep Dive (Part 1 - Functional)
Dr. Fred Baptiste
14. Slicing - Lecture
2:48, line 6, 
s.end -> 2      # should it be "s.stop"?

Reference url: 
https://docs.python.org/3.6/library/functions.html?highlight=slice#slice
"Slice objects have read-only data attributes start, stop and step ..."


35. Iterating Collections - Coding
1:44, last line
self.  i = 0      # extra space after dot notation and before i
Comments: This does not impact functionality, but for common style and readability, maybe the extra space can be removed.
For such a great quality course, everything, little and big, is important, the devil is in the details.


47. The iter() Function - Lecture
3:38, line 8th from bottom
def __next__:     # should it be def __next__(self):, 
Comments: Please refer to next lecture in same course below for actual coding implementation
48. The iter() Function - Coding
5:50, line 7 from bottom, def __next__(self):   


62. Making an Iterable from a Generator - Lecture
5:50, last 2 line
def __iter__(self):
    return squares(n)      # n , should it be "return squares(self.n)
Comments: without "self.n", the code causes below error, also, check next lecture
63. Making an Iterable from a Generator - Coding, (this lecture may have correct code)
1:58, last line, "return squares_gen(self.n)"

      5     def __iter__(self):
----> 6         return squares(n)

NameError: name 'n' is not defined    
    
        
102. Additional Uses - Lecture
5:41, line 4 from bottom
lm.print(Item 2')    
Comments: 
lm.print('Item 2')   # should there be an openning single quote in front of "Item"


119. Generator States - Lecture
2:29, last line, captions "let's say we pass it to a list, ...)
lst(g) 
Comments:
list(g)     # should the function name be "list", maybe "lst" a typo?


##
Course name: Python 3: Deep Dive (Part 4 - OOP)
Dr. Fred Baptiste

23. Property Decorators - Lecture
4:09 first line, 6th line from bottom        
5:25 first line 
def MyClass:
Comments:
Should keyword "class" be used instead of "def" like below?
"def MyClass:" causes "SyntaxError, invalid syntax"

class MyClass:           


27. Deleting Properties - Lecture
3:56 2nd line
class Circle:
Comments: 
Should the class name be "Color"? 
The 3rd line from bottom uses "c = Color('yellow')", not "class Circle from 2nd line".


44. Project Solution - Confirmation Codes
22:48 Side Note: "For real production grade work ... make use of the pytz library"
Comments:  pytz has been deprecated since 3.9, see below from documentation.

https://pypi.org/project/pytz/
"Projects using Python 3.9 or later should be using the support now included as part of the standard library,..."
"This project is in maintenance mode. "  (Issues & Limitations, at the bottom on above page)

https://pypi.org/project/pytz-deprecation-shim/
"pytz has served the Python community well for many years, but it is no longer the best option for providing time zones."


110. Solution - Part 1
31:23
Comments:
line 2 from top: 
with self.subTest(test_number=i):      # correct spelling "number"
line 9th from bottom: 
with self.subTest(test_nunber=i):       # spelling "nunber", could it be a typo? (for "number")
31:33 
line 3rd from botttom:
with self.subTest(test_nunber=i):       # same as above
32:24
line 3rd from botttom:
with self.subTest(test_nunber=i):       # same as above
37:29
line 7 from top
def __set_name__(self, owener_class, prop_name)    # "owener", could it be a typo of "owner"? line 6th from bottom has correct "owner_class".


115. Enumerations - Coding
'PENDING' in Status
TypeError: unsupported operand type(s) for 'in': 'str' and 'EnumMeta'


117. Aliases - Coding
5:26
line 3rd from bottom
read = 'ready'    # "read" could it be a type of "ready"? (missing letteer 'y' at end?


##
Course name: Learn Pro Advanced Python Programming
Instructor: bilal-khan (Unair Bilal)

General comments:
"PEP 8 – Style Guide for Python Code" is generally acceped as the coding standard for python programs because "code is read much more often than it is written".  This course is short of following this standard and could suggest other writing styles are acceptable, and free style should be avoided.

PEP 8 style - https://peps.python.org/pep-0008/
From PEP  8 style:
Whitespace in Expressions and Statements
Immediately before a comma, semicolon, or colon:    (# 1)
# Correct:
i = i + 1
submitted += 1
x = x*2 - 1
hypot2 = x*x + y*y
c = (a+b) * (a-b)

# Wrong:
i=i+1    # 2
submitted +=1   # 3
x = x * 2 - 1
hypot2 = x * x + y * y
c = (a + b) * (a - b)

Examples from the course:
26. Creating - Doubly Linked List
8:25 
line number 16,22    self.head=a    (# 2)
line number 18         def printing(self,node)    (# 1)
line number 25         x= LinkedList()    (# 3)


24. Insertion - Singly Linked List
19:23
line 3 from top: self.heaad=newest    # "heaad" does not match "self.head" at line 2
23:20
line 4 from top: still see same as above 
Comments:
The above code runs correctly when the linked list "x" is not "None".  
When "x" is "None", a new separate "heaad" Node will be created along with "self.head", rather assign "newest" to "self.head", and "self.heaad" and "self.head", below is results:
{'head': None, 'heaad': <__main__.Node object at 0xxxxx>}  (head is still None)

With correct code, "self.head = newest"
here is results: (head is linked to a node)
{'head': <__main__.Node object at 0xxxxx>}


27. Insertion - Doubly Linked List
5:50~14:27 somehow the screen was cut in half, live coding is not visiable at bottom half of screen, while the top half of screeen was black 


44. Generator - Example
2:32 
line number 19,    listNatural = naturalNoList(1000000)    # 6 zeros, should be "one million"
Captions: "So I have passed this value one hundred thousand ... append for one hundred thousand", could it be a typo instead of "one million"?


44. Generator - Example
5:45 
output panel, 2nd line from bottom, "Total Time Takes by the Function is  0.0"
Comments: 
The function "naturalNoGen(100000)" does take time to run in processor, when time.time() or system clock is used the actual processor time was not captured.  To capture high-resolution timing for a block of code or a function, time.perf_counter() is recommended.  Using below code shows actual processor time to run this function.

from time import perf_counter 
t1 = perf_counter()
listNatural = naturallNoGen(1_000_000)     # use separator for easy read 
t2 = perf_counter()

Output:
total time takes by the function is  2.2746459871996194    # uses the processor's performance counter to measure time


75. Determining the Current Thread
line number 5, 7, 11, 13
print(threading.current_thread().getName(), "Starting")    # or "Exiting" 
Comments:
threading.current_threadd().getName(), this method has been deprecated in 3.10, recommend to add a note to it.
Python documentation url, https://docs.python.org/3/library/threading.html#threading.Thread.getName


77. Enumerating Threads
line number 19
t.setDaemon(True)
Comments:
setDaemon(), this method has been deprecated in 3.10, recommend to add a note to it.
Python documentation url, https://docs.python.org/3/library/threading.html#threading.Thread.setDaemon


147. Pandas Module Part-11
1:27
code line numbe 26:
writer.save()
Comments:
The pandas.ExcelWriter.save() method is marked since panda 1.5 release, (DEPRECATED) Save workbook to disk, recommend to add a note to it.
Please see pandas documentation below.
https://pandas.pydata.org/pandas-docs/version/1.5/reference/api/pandas.ExcelWriter.html


135. Computing Mathematical Functions using Numpy
12:05
code line 4: big_data = np.random.random_integers(1,101.1000)
Comments:
This function has been deprecated. Use randint instead, e.g "np.random.randint(1, 101+1, size = 1000)
Per numpy documentation, https://numpy.org/doc/stable/reference/random/generated/numpy.random.random_integers.html
Tested in numpy version '1.23.5'
